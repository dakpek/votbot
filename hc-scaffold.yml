{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+e8a394b",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # DNA File Version
    # Version indicator for changes to DNA
    "Version": 1,

    # DNA Unique ID
    # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
    "UUID": "76766098-9061-4be1-9a2f-27cbd2a4db1b",

    # Application Name
    # What would you like to call your holochain app?
    "Name": "votbot",

    # Properties
    # Properties that you want available across all Zomes.
    "Properties": {

      # Application Description
      # Briefly describe your holochain app.
      "description": "a governance mechanism for cooperative organizations",

      # Language
      # The base (human) language of this holochain app.
      "language": "en"
    },

    # Properties Schema File
    # Describes the entries in the Properties section of your dna file.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT Settings
    # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # Zomes
    # List the Zomes your application will support.
    "Zomes": [
      {

        # Zome Name
        # The name of this code module.
        "Name": "taskMarketplace",

        # Zome Description
        # What is the purpose of this module?
        "Description": "a marketplace where members can earn vots for tasks.",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "taskmarketplace.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "user", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"username\",\n    \"vots\"\n  ],\n  \"properties\": {\n    \"username\": {\n      \"$id\": \"#/properties/username\",\n      \"type\": \"string\",\n      \"title\": \"The Username Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"dakpek\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"vots\": {\n      \"$id\": \"#/properties/vots\",\n      \"type\": \"integer\",\n      \"title\": \"The Vots Schema\",\n      \"default\": 0,\n      \"examples\": [\n        42\n      ]\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "task", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"id\",\n    \"title\",\n    \"description\",\n    \"pool\",\n    \"createdAt\",\n    \"status\"\n  ],\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"#/properties/id\",\n      \"type\": \"string\",\n      \"title\": \"The Id Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"12c23b23r\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"title\": {\n      \"$id\": \"#/properties/title\",\n      \"type\": \"string\",\n      \"title\": \"The Title Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"clean the bathroom!\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"description\": {\n      \"$id\": \"#/properties/description\",\n      \"type\": \"string\",\n      \"title\": \"The Description Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"it stinks!\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"pool\": {\n      \"$id\": \"#/properties/pool\",\n      \"type\": \"integer\",\n      \"title\": \"The Pool Schema\",\n      \"default\": 0,\n      \"examples\": [\n        100\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"#/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-10-12T19:00:00\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"status\": {\n      \"$id\": \"#/properties/status\",\n      \"type\": \"string\",\n      \"title\": \"The Status Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"open\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "userLink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "userCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:user"
          },
          {
            "Name": "userRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:user"
          },
          {
            "Name": "userUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:user"
          },
          {
            "Name": "userDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:user"
          },
          {
            "Name": "taskCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:task"
          },
          {
            "Name": "taskRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:task"
          },
          {
            "Name": "taskUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:task"
          },
          {
            "Name": "taskDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:task"
          },
          {
            "Name": "transferVots", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "authenticate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction userCreate (userEntry) {\n  var userHash = commit(\"user\", userEntry);\n  return userHash;\n}\n\nfunction userRead (userHash) {\n  var user = get(userHash);\n  return user;\n}\n\nfunction userUpdate (userHash) {\n  var sampleValue={\"username\":\"dakpek\",\"vots\":42,\"extraField\":true};\n  var userOutHash = update(\"user\", sampleValue, userHash);\n  return userOutHash;\n}\n\nfunction userDelete (userHash) {\n  var result = remove(userHash, \"\");\n  return result;\n}\n\nfunction taskCreate (taskEntry) {\n  var taskHash = commit(\"task\", taskEntry);\n  return taskHash;\n}\n\nfunction taskRead (taskHash) {\n  var task = get(taskHash);\n  return task;\n}\n\nfunction taskUpdate (taskHash) {\n  var sampleValue={\"id\":\"12c23b23r\",\"title\":\"clean the bathroom!\",\"description\":\"it stinks!\",\"pool\":100,\"createdAt\":\"2018-10-12T19:00:00\",\"status\":\"open\",\"extraField\":true};\n  var taskOutHash = update(\"task\", sampleValue, taskHash);\n  return taskOutHash;\n}\n\nfunction taskDelete (taskHash) {\n  var result = remove(taskHash, \"\");\n  return result;\n}\n\nfunction transferVots (params) {\n  // your custom code here\n  return {};\n}\n\nfunction authenticate (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"task\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"task\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"task\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"task\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"task\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Auto-Generated test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "taskMarketplace",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userCreate",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "userCreate",

            # Input
            # Input sent to the function
            "Input": {
              "username": "dakpek",
              "vots": 42
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userRead",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "userRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "username": "dakpek",
              "vots": 42
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "userUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userDelete",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "userDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for taskCreate",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "taskCreate",

            # Input
            # Input sent to the function
            "Input": {
              "id": "12c23b23r",
              "title": "clean the bathroom!",
              "description": "it stinks!",
              "pool": 100,
              "createdAt": "2018-10-12T19:00:00",
              "status": "open"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for taskRead",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "taskRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "id": "12c23b23r",
              "title": "clean the bathroom!",
              "description": "it stinks!",
              "pool": 100,
              "createdAt": "2018-10-12T19:00:00",
              "status": "open"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for taskUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "taskUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for taskDelete",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "taskDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for transferVots",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "transferVots",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for authenticate",

            # Zome
            # The zome this test is related to
            "Zome": "taskMarketplace",

            # Function Name
            # The function to test
            "FnName": "authenticate",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    }
  ]
}